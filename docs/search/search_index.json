{"docs":[{"location":"/overview/contributing.html","text":"","title":"Contributing"},{"location":"/overview/contributing.html#contributing","text":"[TBD]","title":"Contributing"},{"location":"/index.html","text":"","title":"Text Analytics Pipeline (TAP)"},{"location":"/index.html#text-analytics-pipeline-tap-","text":"Get started immediately with the Quick Start\nOverview Quick Start License Submitting bugs and suggestions User Product Dependencies Getting a local copy of TAP Building TAP Running TAP Developer Contributing Project Structure IDE Set-up Documentation Updates","title":"Text Analytics Pipeline (TAP)"},{"location":"/overview/index.html","text":"","title":"Overview"},{"location":"/overview/index.html#overview","text":"","title":"Overview"},{"location":"/overview/quick_start.html","text":"","title":"Quick Start"},{"location":"/overview/quick_start.html#quick-start","text":"Clone the project source code with git:\ngit clone https://github.com/uts-cic/tap\nEnsure you have the latest sbt installed\nAdd a LocalSbtSettings.scala file in the project directory. This will hold your specific settings for your build:\nimport sbt._\n\nobject LocalSbtSettings {\n val githubBaseUrl = \"https://github.com/uts-cic/tap\" //Change this to your fork\n val scaladocApiBaseUrl = \"https://uts-cic.github.io/tap\" //Change this to your fork\n val dockerRepoURI = \"the.url.to.publish.docker.images.to\"\n}\nRun TAP with enough memory to process larger models:\nbash sbt -J-Xmx4096M run\nConnect to http://localhost:9000 with your web browser","title":"Quick Start"},{"location":"/overview/licensing.html","text":"","title":"License"},{"location":"/overview/licensing.html#license","text":"© University of Technology Sydney 2016-2017 Licensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"/overview/bugs.html","text":"","title":"Submitting bugs and suggestions"},{"location":"/overview/bugs.html#submitting-bugs-and-suggestions","text":"Please use GitHub issues to notify us of a bug or to request a new feature. Before adding a new request, please search the existing issues to see if there is one the same or similar to yours. If so, add a reaction (like :+1: or :-1:) to the issue and post any additional relevant comments that will be helpful.","title":"Submitting bugs and suggestions"},{"location":"/user/index.html","text":"","title":"User"},{"location":"/user/index.html#user","text":"","title":"User"},{"location":"/user/product_dependencies.html","text":"","title":"Product Dependencies"},{"location":"/user/product_dependencies.html#product-dependencies","text":"The following products are required to build and run TAP, and to potentially help you contribute to the TAP project. They are basically the tools required to run an SBT play application. Other dependencies are also specified in build.sbt and will be automatically downloaded during the first build.\nMany of the tools/products will be downloaded during the build as build.sbt dependencies or indirectly by other products. Perhaps you want to start with cloning and building TAP, then refer to the list in this section in response to errors to see what you might be missing.\nGit You will need the Git source control command line tools and/or a Git gui interface if you want to clone and contribute to the project, otherwise you can just download a zip of the source code. The git tools are available either through your software installation tool such as Synaptic or from the Git website. sbt sbt will build the project and download much of the needed software for us, but if it is not on our system already, we need to download it first. Even if sbt is already installed, we may need to use a different level of sbt to do the build. Once you downloaded the code, position in the ~/tap directory, and issue the following command : sbt about\n in the ~/tap directory. You should get the following output : [info] This is sbt 0.13.16\n[info] The current project is {file:~/tap/}tap 3.0.4or\n[info] The current project is built against Scala 2.12.3\n If the sbt version is different from than 0.13.16, wait until the first compile is done, and issue the check again as the sbt build should download the correct version for you. If not, download the the 0.13.16 version that is used in the project from the sbt website Scala The Scala compiler version used to compile the code is 2.12.3. This should match the run-time Scala version as Scala run-time is not backward compatible. This should be taken care of by the build.sbt file on the first compile. You can issue the following command to check your Scala version: scala -version\n This is the expected output: Scala code runner version 2.12.3 -- Copyright 2002-2017, LAMP/EPFL and Lightbend, Inc.:\n Java SE Development Kit (JDK) and Java run-time (JRE) Check that you have an up to date version of the JRE. It should be at least 1.8 (The build is tested using 1.8), otherwise you have to update the Java run time on your machine. Issue: java -version\n The JDK is also needed to compile java files in the project, and should also be at the 1.8 level. Issue : javac -version\n If the JDK or JRE are missing or at an older level, the 1.8 level can be downloaded from Oracle. Installing the JDK should take care of installing the JRE also. You should provide enough memory for the JDK and JRE to build and run this project. While TAP will run with standard memory settings, certain NLP processes which require the loading of large models will require additional memory. The following values are suggested : -Xmx4096M -Xss1M The Play Framework This can be downloaded from the Play Framework website. Press on the Download 2.6.6 button and follow the appropriate instructions for your operating system.","title":"Product Dependencies"},{"location":"/user/source_code.html","text":"","title":"Getting a local copy of TAP"},{"location":"/user/source_code.html#getting-a-local-copy-of-tap","text":"Clone the github repository to your local repository copy on your PC, or download the zip file if you just want to build the project, and have no intention to submit a contribution.\nTo clone the project, position to the directory where you want the local repository placed (Your home directory is fine) and issue the following command. This will create a copy of the repository in the tap directory.\ngit clone https://github.com/uts-cic/tap.git\nThe following jar files should also be placed in the lib directory: (Note that the models jar is relatively large at around 750M so it might take some time to download depending on your internet speed). [tap-models-jar](https://s3-ap-southeast-2.amazonaws.com/dev-tap-cic-uts/cc.factorie.app.nlp.all-models-1.0.0.jar)\n[tap-factorie-jar](https://s3-ap-southeast-2.amazonaws.com/dev-tap-cic-uts/nlpfactorie_2.12-0.1.jar)\n Copy the files to the lib directory: cd ~/tap\nmkdir -p lib\ncd lib\nwget https://s3-ap-southeast-2.amazonaws.com/dev-tap-cic-uts/cc.factorie.app.nlp.all-models-1.0.0.jar\nwget https://s3-ap-southeast-2.amazonaws.com/dev-tap-cic-uts/nlpfactorie_2.12-0.1.jar\n For Word Vector, a pre-trained model from Google News should be downloaded here: [GoogleNews-vectors-negative300.bin.gz](https://drive.google.com/file/d/0B7XkCwpI5KDYNlNUTTlSS21pQmM/edit?usp=sharing)\n Create models/googleNews directory: cd ~/tap/models\nmkdir -p googleNews\n Copy the downloaded file to the models/googleNews directory.","title":"Getting a local copy of TAP"},{"location":"/user/build_product.html","text":"","title":"Building TAP"},{"location":"/user/build_product.html#building-tap","text":"(1) Move to the directory where you placed the tap product. Assuming it is in the home directory, you should see a build.sbt file containing instruction on how the build is done, as well as this README.md file:\ncd ~/tap\n(2) Create a LocalSbtSettings.scala file in the project directory. This will hold your specific settings for your build:\nimport sbt._\n\nobject LocalSbtSettings {\n\n  val githubBaseUrl = \"https://github.com/uts-cic/tap\" //Change this to your fork\n  val scaladocApiBaseUrl = \"https://uts-cic.github.io/tap\" //Change this to your fork\n  \n  val dockerRepoURI = \"the.url.to.publish.docker.images.to\"\n}\n(3) Compile the product.\nThe first compile will be very slow as dependencies have to be fetched and placed in the ~/.ivy2 directory.\nsbt compile\nThe following compile warnings seem to be safe to ignore, but ensure the last compile ends with [SUCCESS] :\ncom.typesafe.akka:akka-stream_2.12:2.5.6 is selected over {2.5.4, 2.5.3, 2.4.19}\n  com.typesafe.akka:akka-actor_2.12:2.5.6 is selected over {2.5.4, 2.4.19}\n  com.google.guava:guava:22.0 is selected over 19.0\n  ...srcc/main/scala/handlers/GraphQlHandler.scala:42: match may not be exhaustive.\n  ...\n  there were 8 feature warnings; re-run with -feature for details\n  two warnings found^[[0m\n  Total time: 11 s, completed Oct 7, 2017 12:39:37 PM^[[0m","title":"Building TAP"},{"location":"/user/run_product.html","text":"","title":"Running TAP"},{"location":"/user/run_product.html#running-tap","text":"Move to the directory where you placed the tap product. Assuming it is in the home directory: cd ~/tap\n Ensure the JVM has enough memory to run the application. export _JAVA_OPTIONS=\"-Xmx2048M -Xss1M\"\n You can either run TAP using either of the following methods: Using sbt: sbt run Using play: play If you get an exception in the SBtParser as in the following lines : java.lang.UnsupportedOperationException: Position.start on class scala.reflect.internal.util.OffsetPosition\nat scala.reflect.internal.util.Position.start(Position.scala:114)\nat sbt.internals.parser.SbtParser.sbt$internals$parser$SbtParser$$convertStatement$1(SbtParser.scala:148)\n This means Play is picking up an old SBT Parser that cannot deal with parsing the latest layout of the SBT files as explained in this exchange: play-parse-bug In order to avoid this error, and run the application with play, you should update play to use the 2.10.4 Parser which is the minimum level parser that fixes the error. This update will take a long time to run, but is a one off. SBT_SCALA_VERSION=2.10.4 play update\n You then have to run play always specifying the SBT Scala version as described in the next step. Using play, but determining the SBT Scala version This is necessary if you want to run play and need to avoid the SbtParser exception.   SBT_SCALA_VERSION=2.10.4 play run\n After you run the TAP Server, you should see the following lines, indicating that the server is running and listening to requests : Picked up _JAVA_OPTIONS: -Xms512M -Xmx2048M -Xss1M\n[info] Loading global plugins from ~/.sbt/0.13/plugins\n[info] Loading project definition from ~/tap/project\n[info] Set current project to tap (in build file:~/tap/)\n--- (Running the application, auto-reloading is enabled) ---\n[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000\n You can now connect to the server by typing the following in your browser: http://localhost:9000/\n The product should start and you can use it. You should see the following in your browser. TAP Server with GraphQL\nUse the graphiql IDE here\n To end the server, close your browser session then type return in your console where the server is running. The following message should appear on the console. [info] p.c.s.AkkaHttpServer - Stopping server...","title":"Running TAP"},{"location":"/developer/index.html","text":"","title":"Developer"},{"location":"/developer/index.html#developer","text":"","title":"Developer"},{"location":"/developer/contributing.html","text":"","title":"Contributing"},{"location":"/developer/contributing.html#contributing","text":"Would you like to contribute to this open source project. Some guidelines on how to do so will be here soon.\nAll bug fixes and features merged into develop branch. If you have a contribution, create a new pull request to the develop branch.","title":"Contributing"},{"location":"/developer/project_structure.html","text":"","title":"Project Structure"},{"location":"/developer/project_structure.html#project-structure","text":"Although TAP is a Play project, the project structure is that of a Maven/sbt project and does not follow the Play default project structure.\nThe build.sbt file indicates that we are using an alternative project structure to Play.\ndisablePlugins(PlayLayoutPlugin)\n    PlayKeys.playMonitoredFiles ++= (sourceDirectories in (Compile, TwirlKeys.compileTemplates)).value\nFor more details, see the “Default SBT Layout” section in the “Anatomy of a Play Application” chapter in the Play 2.6 Documentation:\n[play-project-anatomy](https://playframework.com/documentation/2.6.x/Anatomy)","title":"Project Structure"},{"location":"/developer/ide_setup.html","text":"","title":"IDE Set-up"},{"location":"/developer/ide_setup.html#ide-set-up","text":"An IDE provides a more convenient and efficient way of doing development. The Intellij IDEA is preferred because of its Scala support, and relative ease of use.\nCheck that the Scala and SBT plugins are installed. Install them if they are missing.  File-Settings-Plugins\n Import the project into Intellij IDEA  File - New - Project from Existing sources\n\n Navigate to the build.sbt file in the tap directory where you cloned the project source code.\n Ensure the JVM has enough memory to work with (-Xmx2048M -Xss1M -Xmx512M)  File - Settings - Other Settings - SBT - VM Parameters\n Add the library dependencies  File - Project Structure - Modules\n\n Point to and add the jars you imported into the lib directory:\n\n cc.factorie.app.nlp.all-models-1.0.0.jar\n nlpfactorie_2.12-0.1.jar\n Run Tap Run - Run Tap","title":"IDE Set-up"},{"location":"/developer/doc_updates.html","text":"","title":"Documentation Updates"},{"location":"/developer/doc_updates.html#documentation-updates","text":"Paradox is used to udpate the project documentation which is maintained under the src/main/paradox directory.\nIf you update the documentation as part of your work item, you would need to generate the paradox documentation.\nRun the following command:\nsbt paradox; sbt copyDocs\nThis will generate html files in the doc directory, and any modified files will be part of you pull request.","title":"Documentation Updates"},{"location":"/user/queries.html","text":"","title":"TAP Queries"},{"location":"/user/queries.html#tap-queries","text":"visible: remove nonstandard characters in the input text. Analytics feature: text with standard characters\n clean: replace quotes and hyphens with single byte versions. Analytics feature:    cleaned text\n cleanPreserve: replace control characters while preserving length. Analytics feature: cleaned text\n cleanMinimal: strip control characters, and reduce whitespace. Analytics feature: cleaned text\n cleanAscii: returns ascii safe cleaned text. Analytics feature: cleaned text\n annotations: return sentences for text. Analytics features: idx: sentence index\nstart: index of the start token of the sentence in the paragraph\nend: index of the end token of the sentence in the paragraph\nlength: length of the sentence\ntokens: list of tokens\n    - idx: index of token in the sentence\n    - term: token\n    - lemma: the canonical form of the token\n    - postag: a part of speech tag to the token\n expressions: return expressions for text. Analytics features: sentIdx: sentence index\naffect: list of affect expressions\n    - text: affect expression\nepistemic: list of epistemic expressions\n    - text: epistemic expression\n    - startIdx: index of the starting token in the epistemic expression \n    - endIdx: index of the ending token in the epistemic expression\nmodal: list of modal expressions\n    - text: modal expression\n syllables: count syllables in words and calculates averages for sentences. Analytics features: sentIdx: sentence index\navgSyllables: average syllables in the sentence\ncounts: list of syllables count for each word in the sentence\n spelling: return spelling errors and suggestions for each sentence. Analytics features: sentIdx: sentence index\nspelling: list of spelling errors and suggestions\n    message: return message\n    suggestions: list of suggestions\n    start: index of the starting character of the error in the sentence\n    end: index of the ending character of the error in the sentence\n vocabulary: return vocabulary for text. Analytics features: unique: number of unique vocabolaries\nterms: list of vocabolaries\n    term: vocabulary\n    count: number of the vocabolary in the text\n metrics: return metrics for text. Analytics features: sentences: number of sentences in the text\ntokens: total number of tokens\nwords: total number of words\ncharacters: total number of characters\npunctuation: total number of punctuations\nwhitespace: total number of whitespace\nsentWordCounts: list of word counts of each sentence\naverageSentWordCount: average word count per sentence\nwordLengths: list of word lengths of each sentence\naverageWordLength: average word length in the text\naverageSentWordLength: average word length per sentence\n posStats: return posStats for text. Analytics features: verbNounRatio: number of verb/ number of noun\nfuturePastRatio: number of future/ number of past\nadjectiveWordRatio: number of adjective/ number of word\nnamedEntityWordRatio: number of named entity/ number of word\nnounDistribution: list of noun distributions of each sentence\nverbDistribution: list of verb distributions of each sentence\nadjectiveDistribution: list of adjective distributions of each sentence","title":"TAP Queries"}]}