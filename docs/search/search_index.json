{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Text Analytics Pipeline (TAP)"},{"location":"/index.html#text-analytics-pipeline-tap-","text":"Notice The documentation is currently undergoing changes to be more helpful and more accurate. If you have any suggestions on how to improve it please open an issue!\nGet started immediately with the Quick Start\nOverview Quick Start Get started with Docker Docker for Windows 10 Docker for Mac Docker ToolBox Docker CE for Linux Run Docker on Digital Ocean Get started locally without Docker FAQ and common issues. License Submitting bugs and suggestions Contributing I’m a User Building TAP from source code Product Dependencies Building and running locally Building TAP without source code Get Up and running with Docker Get up and running with Digital Ocean Using TAP once it’s running Using the TAP Python Client TAP Queries I’m a Developer Getting setup with an IDE Clone the repo Working with Windows(7,10), Mac and Linux (Ubuntu Desktop) with IDEA Ultimate Contributing Working with the Repo Working with the code Creating Issues Pull Requests Project Structure How to edit documentation","title":"Text Analytics Pipeline (TAP)"},{"location":"/overview/index.html","text":"","title":"Overview"},{"location":"/overview/index.html#overview","text":"Quick Start Get started with Docker Docker for Windows 10 Docker for Mac Docker ToolBox Docker CE for Linux Run Docker on Digital Ocean Get started locally without Docker FAQ and common issues. License Submitting bugs and suggestions Contributing","title":"Overview"},{"location":"/overview/quick_start.html","text":"","title":"Quick Start"},{"location":"/overview/quick_start.html#quick-start","text":"Get started with Docker Docker for Windows 10 Docker for Mac Docker ToolBox Docker CE for Linux Run Docker on Digital Ocean Get started locally without Docker FAQ and common issues.","title":"Quick Start"},{"location":"/overview/quick_start.html#get-started-with-docker","text":"","title":"Get started with Docker"},{"location":"/overview/quick_start.html#docker-for-windows-10","text":"Notice Docker for Windows requires: Windows 10 64bit: Pro, Enterprise or Education (1607 Anniversary Update, Build 14393 or later). Virtualization is enabled in BIOS. Typically, virtualization is enabled by default. This is different from having Hyper-V enabled. For more detail see Virtualization must be enabled in Troubleshooting. CPU SLAT-capable feature. At least 4GB of RAM.\nIf you do not have windows 10 Pro, Enterprise or Education, Please use Docker Toolbox.\nThis is the easiest way to get started with docker and TAP. Windows 10 has an app called Docker For Windows which will handle everything automatically for you. See How To install Docker For Windows\nEnsure you have docker for windows installed and it is running. First, quickly create a virtual switch for your virtual machine (VM) to use, so they can use your network adapter. Launch Hyper-V Manager Click Virtual Switch Manager in the right-hand menu Click Create Virtual Switch of type External Give it the name “myswitch”, and check the box to share your host machine’s active network adapter Now create a VM we can use to run TAP on. (You may need to run this in admin, press windows key + x > Command Prompt (Admin)) docker-machine create -d hyperv --hyperv-memory 2048  --hyperv-virtual-switch \"myswitch\" myvm1\n Notice we are passing in some custom variables We are giving it 2gb of ram We are choosing the switch we just created “myswitch” We are naming it “myvm1” Once it is created, verify that it is running and write down it’s IP. (here mine is 10.1.1.190) docker-machine ls\n To control your newly created docker machine there is a simple command you can run docker-machine env myvm1\n This will return a command you can run in order to automatically send your docker commands to your vm. (the last line minus the REM) Yours may be different than mine, be sure to run whatever command your terminal returns. run that command @FOR /f \"tokens=*\" %i IN ('docker-machine env myvm1') DO @%i\n Now any docker commands we run will run on the machine we created! Now let’s get TAP running. run docker run and pass in a number of parameters docker run -e JAVA_OPTS=\"-Xms512M -Xmx6000M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M\" -e TAP_HOSTS=\"10.1.1.190:9000\" -e TAP_SECRET=\"test\" -p 9000:9000 andrewresearch/tap:3.2.2\n There are a few parameters here: JAVA_OPTS is passing in our custom java environment variables which allow us to increase the amount of memory the application can use. TAP_HOSTS is telling our application which IP is authorised to use our application, In this case you need to pass in your machine IP you wrote down earlier. In my case it is 10.1.1.190:9000 TAP_SECRET is a secret variable we can pass through to our application to ensure we are allowed to run the image. in this case just include “test” -p tells the docker machine which port to use, So we are mapping our Port 9000 to the machines port 9000 lastly we include the docker image name in this case is “andrewresearch/tap:3.2.2” (3.2.2 is the version number, which may change at a later date. be sure to use the latest available) That’s it! if all went well, The docker should mention factorie-nlp-api - Completed in xms and you should be able to access your TAP instance by navigating to your Docker IP in a browser! (in my case 10.1.1.190:9000) If there are any issues with this documentation, or you wish to suggest changes, open an issue.","title":"Docker for Windows 10"},{"location":"/overview/quick_start.html#docker-for-mac","text":"Notice Mac hardware must be a 2010 or newer model, with Intel’s hardware support for memory management unit (MMU) virtualization, including Extended Page Tables (EPT) and Unrestricted Mode. You can check to see if your machine has this support by running the following command in a terminal: sysctl kern.hv_support MacOS El Capitan 10.11 and newer macOS releases are supported. We recommend upgrading to the latest version of macOS. At least 4GB of RAM VirtualBox prior to version 4.3.30 must NOT be installed (it is incompatible with Docker for Mac). If you have a newer version of VirtualBox installed, it’s fine.\nIf you do not have a late enough Mac model Please use Docker Toolbox.\nThis is the easiest way to get started with docker and TAP. Late models of Mac have an app called Docker For Mac which will handle everything automatically for you. See How To install Docker For Mac\nEnsure you have docker for mac installed and it is running. Ensure you have VirtualBox version 5+ installed on your system Now create a VM we can use to run TAP on. docker-machine create -d virtualbox --virtualbox-memory 2048  myvm1\n Notice we are passing in some custom variables We are giving it 2gb of ram We are naming it “myvm1” Once it is created, verify that it is running and write down it’s IP. (here mine is 192.168.99.100) docker-machine ls\n To control your newly created docker machine there is a simple command you can run docker-machine env myvm1\n This will return a command you can run in order to automatically send your docker commands to your vm. (the last line minus the REM) Yours may be different than mine, be sure to run whatever command your terminal returns. run that command eval $(docker-machine env myvm1)\n Now any docker commands we run will run on the machine we created! Now let’s get TAP running. run docker run and pass in a number of parameters docker run -e JAVA_OPTS=\"-Xms512M -Xmx6000M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M\" -e TAP_HOSTS=\"192.168.99.100:9000\" -e TAP_SECRET=\"test\" -p 9000:9000 andrewresearch/tap:3.2.2\n There are a few parameters here: JAVA_OPTS is passing in our custom java environment variables which allow us to increase the amount of memory the application can use. TAP_HOSTS is telling our application which IP is authorised to use our application, In this case you need to pass in your machine IP you wrote down earlier. In my case it is 192.168.99.100:9000 TAP_SECRET is a secret variable we can pass through to our application to ensure we are allowed to run the image. in this case just include “test” -p tells the docker machine which port to use, So we are mapping our Port 9000 to the machines port 9000 lastly we include the docker image name in this case is “andrewresearch/tap:3.2.2” (3.2.2 is the version number, which may change at a later date. be sure to use the latest available) That’s it! if all went well, The docker should mention factorie-nlp-api - Completed in xms and you should be able to access your TAP instance by navigating to your Docker IP in a browser! (in my case 192.168.99.100:9000) If there are any issues with this documentation, or you wish to suggest changes, open an issue.","title":"Docker for Mac"},{"location":"/overview/quick_start.html#docker-toolbox","text":"Ensure you have installed Docker Toolbox\nInstall Docker Toolbox for Windows\nInstall Docker Toolbox for Mac\nWhen installing Docker Toolbox, Ensure you install VirtualBox and Git, To ensure the program works correctly.\nOnce you have Docker Toolbox running and have run the Quick Setup Icon it created you should have this screen.\nFirstly let’s remove the default docker machine, as we need to create one with 2gb memory. docker-machine rm default\n Great, Let’s create a new one and pass in some custom parameters docker-machine create -d virtualbox --virtualbox-memory=2048 myvm1\n This created a new machine called “myvm1” and gives it 2gb of ram instead of the default 1gb. Great! let’s get our docker machine IP. docker-machine ls\n My ip in this case would be 192.168.99.100 Now we want to control our docker machine docker-machine env myvm1\n this will return a command we can run to set our machine as the active environment. The last line is what we want, copy and paste it to set this machine as active.     eval $(\"C:\\Program Files\\Docker Toolbox\\docker-machine.exe\" env myvm1)   \n Now we can start our Tap Image. docker run -e JAVA_OPTS=\"-Xms512M -Xmx6000M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M\" -e TAP_HOSTS=\"192.168.99.100:9000\" -e TAP_SECRET=\"test\" -p 9000:9000 andrewresearch/tap:3.2.2\n There are a few parameters here: JAVA_OPTS is passing in our custom java environment variables which allow us to increase the amount of memory the application can use. TAP_HOSTS is telling our application which IP is authorised to use our application, In this case you need to pass in your machine IP you wrote down earlier. In my case it is 192.168.99.100:9000 TAP_SECRET is a secret variable we can pass through to our application to ensure we are allowed to run the image. in this case just include “test” -p tells the docker machine which port to use, So we are mapping our Port 9000 to the machines port 9000 lastly we include the docker image name in this case is “andrewresearch/tap:3.2.2” (3.2.2 is the version number, which may change at a later date. be sure to use the latest available) Once that runs it will automatically download everything you require and then let you know it is running with [info] factorie-nlp-api - Completed in xxxxx ms That’s it! TAP is now running in a docker machine, You should be able to use TAP in the browser by navigating to you machine IP with the port 9000 In my case i would navigate to 192.168.99.100:9000 If there are any issues with this documentation, or you wish to suggest changes, open an issue.","title":"Docker ToolBox"},{"location":"/overview/quick_start.html#docker-ce-for-linux","text":"Ensure you have installed Docker CE\nThey have instructions for several versions of linux, Ensure you follow the instructions for your particular version of linux.\nInstalling Docker CE on Linux\nEnsure you have installed Docker Machine\nInstall docker machine on linux\nEnsure you have installed Oracle VirtualBox for linux\nVirtualBox Instructions\nCreate a Virtual Machine to run our docker container. docker-machine create -d virtualbox --virtualbox-memory=2048 myvm1\n run docker-machine ls to get the IP of our new machine. In my case the IP is 192.168.99.100. Let’s write that down for later. We need to set our new docker machine as our active environment. docker-machine env myvm1\n This will return a command we can run which will set our environment to the active docker machine. Copy and paste the last line into your terminal. eval $(docker-machine env myvm1)\n Now any docker commands we run will run on the docker machine. Run our TAP image. docker run -e JAVA_OPTS=\"-Xms512M -Xmx6000M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M\" -e TAP_HOSTS=\"192.168.99.100:9000\" -e TAP_SECRET=\"test\" -p 9000:9000 andrewresearch/tap:3.2.2\n There are a few parameters here: JAVA_OPTS is passing in our custom java environment variables which allow us to increase the amount of memory the application can use. TAP_HOSTS is telling our application which IP is authorised to use our application, In this case you need to pass in your machine IP you wrote down earlier. In my case it is 192.168.99.100:9000 TAP_SECRET is a secret variable we can pass through to our application to ensure we are allowed to run the image. in this case just include “test” -p tells the docker machine which port to use, So we are mapping our Port 9000 to the machines port 9000 lastly we include the docker image name in this case is “andrewresearch/tap:3.2.2” (3.2.2 is the version number, which may change at a later date. be sure to use the latest available) Great once that completes you should see the message [info] factorie-nlp-api - Completed in xxxxx ms That’s it! you should be good to go. You can now access the TAP instance by navigating to your machine ip in your browser with the port 9000 In my case that would 192.168.99.100:9000 If there are any issues with this documentation, or you wish to suggest changes, open an issue.","title":"Docker CE for Linux"},{"location":"/overview/quick_start.html#run-docker-on-digital-ocean","text":"Digital Ocean offers a 1 click Docker Droplet that is capable of running TAP for $10 a month.\nuse this referral code to receive $10 in free credit upon signing up and adding a payment method.\nhttps://m.do.co/c/694c2ae2c08b\nOnce you have an account Create a new Project to use for TAP. Once created, Click Create > Droplet Choose Docker and change the size to the $10 droplet. Disable backups, and choose a datacenter that is closest to you. Add an SSH key or use your existing one. See here for instructions on this. Finally give it a name you will recognize and choose the project you created. Then click create. It may take a few minutes to setup. There are 2 ways we can “talk” to our new droplet. We can use the built in console (requires setting up a root password) Or we can use our ssh key and a client called Putty. To connect with Putty follow this guide To Set a Root Password and use the console follow this guide Once you are logged in on your droplet you should have a command line in front of you. We need to add a swapfile to enable enough ram to get java running. Run the following command to add a swap file. sudo fallocate -l 1G /swapfile\n let’s lock down the swap file so no one else can use it sudo chmod 600 /swapfile\n verify that it’s permissions are correct by typing ls -lh /swapfile\n You should see the following Great, Now mark it as swap so we can actually use it sudo mkswap /swapfile\n Now we can enable it sudo swapon /swapfile\n please note this will be removed if you restart the server. If you wish to make it permanent please see the following guide here Great now we can run the following command to setup your droplet. Please note you need to replace DROPLET-IP with the IP of your droplet. docker run -e JAVA_OPTS=\"-Xms512M -Xmx6000M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M\" -e TAP_HOSTS=\"DROPLET-IP:9000\" -e TAP_SECRET=\"test\" -p 9000:9000 andrewresearch/tap:3.2.2\n That’s it! You should be up and running and now can access your Tap Client from the browser by typing in your Droplet IP and adding the port. DROPLET-IP:9000","title":"Run Docker on Digital Ocean"},{"location":"/overview/quick_start.html#get-started-locally-without-docker","text":"First clone the project source code with git: git clone https://github.com/heta-io/tap\n Ensure you have the latest sbt installed Create a file called LocalSbtSettings.scala in the /project directory. This will hold your specific settings for your build: import sbt._\n\nobject LocalSbtSettings {\n val githubBaseUrl = \"https://github.com/heta-io/tap\" //Change this to your fork\n val scaladocApiBaseUrl = \"https://heta-io.github.io/tap/\" //Change this to your fork\n val dockerRepoURI = \"the.url.to.publish.docker.images.to\" //leave as is if not using docker\n}\n Now we need to setup some variables. Windows 10 Open Start and type “path” Click “Edit System Environment Variables” Click Environment Variables Click New under “User Variables” Enter SBT_OPTS for name and under value enter -Xmx6G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=6G -Xss6G Click ok Click New under “User Variables” Enter TAP_HOSTS for name and under value enter localhost:9000 Click ok Click New under “User Variables” Enter TAP_SECRET for name and under value enter test Click ok Click Path under “User Variables” and click Edit Ensure you have an entry that links to your java directory eg C:\\Program Files\\Java\\jdk1.8.0_181\\bin if it not present, add it and make sure it puts to your jdk director and the bin folder. Click ok and exit the variables screen. close and reopen your terminal window to refresh the variables Windows 7/Vista/8 Open Start > Control Panel > System > Advanced system settings > environment variables Click “Edit System Environment Variables” Click Environment Variables Click New under “User Variables” Enter SBT_OPTS for name and under value enter -Xmx6G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=6G -Xss6G Click ok Click New under “User Variables” Enter TAP_HOSTS for name and under value enter localhost:9000 Click ok Click New under “User Variables” Enter TAP_SECRET for name and under value enter test Click ok Click Path under “User Variables” and click Edit Ensure you have an entry that links to your java directory eg C:\\Program Files\\Java\\jdk1.8.0_181\\bin if it not present, add it and make sure it puts to your jdk director and the bin folder. Click ok and exit the variables screen. close and reopen your terminal window to refresh the variables MacOS Find your bash profile ~/.bash_profile\n Open your bash profile file nano .bash_profile\n Add the following lines export SBT_OPTS='-Xmx6G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=6G -Xss6G'\nexport TAP_HOSTS='localhost:9000'\nexport TAP_SECRET='test'\n Press Ctrl+X and Y to save and exit Open your path variables sudo nano /etc/paths\n ensure that one of the lines leads to your jdk folder. See this guide for help Open terminal in the root directory of the tap project. Run the following command inside the terminal sbt run Connect to http://localhost:9000 with your web browser","title":"Get started locally without Docker"},{"location":"/overview/quick_start.html#faq-and-common-issues-","text":"sbt is not recognised\nYou have not installed SBT and setup the path variable.\nInstall SBT from here and ensure set path environment variables is selected\njavac is not found in this directory\nYou have not setup your javac path variable, or it is not pointing to the correct directory.\nSee here for help setting this up\nDocument Last Updated on 21/11/2018","title":"FAQ and common issues."},{"location":"/overview/licensing.html","text":"","title":"License"},{"location":"/overview/licensing.html#license","text":"© University of Technology Sydney 2016-2017 Licensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"/overview/bugs.html","text":"","title":"Submitting bugs and suggestions"},{"location":"/overview/bugs.html#submitting-bugs-and-suggestions","text":"Please use GitHub issues to notify us of a bug or to request a new feature. Before adding a new request, please search the existing issues to see if there is one the same or similar to yours. If so, add a reaction (like :+1: or :-1:) to the issue and post any additional relevant comments that will be helpful.\nDocument Last Updated on 21/11/2018","title":"Submitting bugs and suggestions"},{"location":"/overview/contributing.html","text":"","title":"Contributing"},{"location":"/overview/contributing.html#contributing","text":"See Contributing","title":"Contributing"},{"location":"/user/index.html","text":"","title":"Im a User"},{"location":"/user/index.html#im-a-user","text":"Building TAP from source code Product Dependencies Building and running locally Building TAP without source code Get Up and running with Docker Get up and running with Digital Ocean Using TAP once it’s running Using the TAP Python Client TAP Queries","title":"I’m a User"},{"location":"/user/user_with_code.html","text":"","title":"Building TAP from source code"},{"location":"/user/user_with_code.html#building-tap-from-source-code","text":"Product Dependencies Building and running locally","title":"Building TAP from source code"},{"location":"/user/user_with_code.html#product-dependencies","text":"The following products are required to build and run TAP, and to potentially help you contribute to the TAP project. They are basically the tools required to run an SBT play application. Other dependencies are also specified in build.sbt and will be automatically downloaded during the first build.\nMany of the tools/products will be downloaded during the build as build.sbt dependencies or indirectly by other products. Perhaps you want to start with cloning and building TAP, then refer to the list in this section in response to errors to see what you might be missing.\nGit You will need the Git source control command line tools and/or a Git gui interface if you want to clone and contribute to the project, otherwise you can just download a zip of the source code. The git tools are available either through your software installation tool such as Synaptic or from the Git website. sbt sbt will build the project and download much of the needed software for us, but if it is not on our system already, we need to download it first. Even if sbt is already installed, we may need to use a different level of sbt to do the build. Once you downloaded the code, position in the ~/tap directory, and issue the following command : sbt about\n in the ~/tap directory. You should get the following output : [info] This is sbt 0.13.16\n[info] The current project is {file:~/tap/}tap 3.0.4or\n[info] The current project is built against Scala 2.12.3\n If the sbt version is different from than 0.13.16, wait until the first compile is done, and issue the check again as the sbt build should download the correct version for you. If not, download the the 0.13.16 version that is used in the project from the sbt website Scala The Scala compiler version used to compile the code is 2.12.3. This should match the run-time Scala version as Scala run-time is not backward compatible. This should be taken care of by the build.sbt file on the first compile. You can issue the following command to check your Scala version: scala -version\n This is the expected output: Scala code runner version 2.12.3 -- Copyright 2002-2017, LAMP/EPFL and Lightbend, Inc.:\n Java SE Development Kit (JDK) and Java run-time (JRE) Check that you have an up to date version of the JRE. It should be at least 1.8 (The build is tested using 1.8), otherwise you have to update the Java run time on your machine. Issue: java -version\n The JDK is also needed to compile java files in the project, and should also be at the 1.8 level. Issue : javac -version\n If the JDK or JRE are missing or at an older level, the 1.8 level can be downloaded from Oracle. Installing the JDK should take care of installing the JRE also. You should provide enough memory for the JDK and JRE to build and run this project. While TAP will run with standard memory settings, certain NLP processes which require the loading of large models will require additional memory. The following values are suggested : -Xmx4096M -Xss1M The Play Framework This can be downloaded from the Play Framework website. Press on the Download 2.6.6 button and follow the appropriate instructions for your operating system.","title":"Product Dependencies"},{"location":"/user/user_with_code.html#building-and-running-locally","text":"See Quick Start\nDocument Last Updated on 21/11/2018","title":"Building and running locally"},{"location":"/user/user_without_code.html","text":"","title":"Building TAP without source code"},{"location":"/user/user_without_code.html#building-tap-without-source-code","text":"Get Up and running with Docker Get up and running with Digital Ocean","title":"Building TAP without source code"},{"location":"/user/user_without_code.html#get-up-and-running-with-docker","text":"See Quick Start","title":"Get Up and running with Docker"},{"location":"/user/user_without_code.html#get-up-and-running-with-digital-ocean","text":"See Quick Start - Run Docker on Digital Ocean\nDocument Last Updated on 21/11/2018","title":"Get up and running with Digital Ocean"},{"location":"/user/using_tap.html","text":"","title":"Using TAP once its running"},{"location":"/user/using_tap.html#using-tap-once-its-running","text":"Using the TAP Python Client TAP Queries","title":"Using TAP once it’s running"},{"location":"/user/using_tap.html#using-the-tap-python-client","text":"Coming soon.\nIf you would like to help with this section see How to edit documentation","title":"Using the TAP Python Client"},{"location":"/user/using_tap.html#tap-queries","text":"visible: remove nonstandard characters in the input text. Analytics feature: text with standard characters\n clean: replace quotes and hyphens with single byte versions. Analytics feature:    cleaned text\n cleanPreserve: replace control characters while preserving length. Analytics feature: cleaned text\n cleanMinimal: strip control characters, and reduce whitespace. Analytics feature: cleaned text\n cleanAscii: returns ascii safe cleaned text. Analytics feature: cleaned text\n annotations: return sentences for text. Analytics features: idx: sentence index\nstart: index of the start token of the sentence in the paragraph\nend: index of the end token of the sentence in the paragraph\nlength: length of the sentence\ntokens: list of tokens\n    - idx: index of token in the sentence\n    - term: token\n    - lemma: the canonical form of the token\n    - postag: a part of speech tag to the token\n expressions: return expressions for text. Analytics features: sentIdx: sentence index\naffect: list of affect expressions\n    - text: affect expression\nepistemic: list of epistemic expressions\n    - text: epistemic expression\n    - startIdx: index of the starting token in the epistemic expression \n    - endIdx: index of the ending token in the epistemic expression\nmodal: list of modal expressions\n    - text: modal expression\n syllables: count syllables in words and calculates averages for sentences. Analytics features: sentIdx: sentence index\navgSyllables: average syllables in the sentence\ncounts: list of syllables count for each word in the sentence\n spelling: return spelling errors and suggestions for each sentence. Analytics features: sentIdx: sentence index\nspelling: list of spelling errors and suggestions\n    message: return message\n    suggestions: list of suggestions\n    start: index of the starting character of the error in the sentence\n    end: index of the ending character of the error in the sentence\n vocabulary: return vocabulary for text. Analytics features: unique: number of unique vocabolaries\nterms: list of vocabolaries\n    term: vocabulary\n    count: number of the vocabolary in the text\n metrics: return metrics for text. Analytics features: sentences: number of sentences in the text\ntokens: total number of tokens\nwords: total number of words\ncharacters: total number of characters\npunctuation: total number of punctuations\nwhitespace: total number of whitespace\nsentWordCounts: list of word counts of each sentence\naverageSentWordCount: average word count per sentence\nwordLengths: list of word lengths of each sentence\naverageWordLength: average word length in the text\naverageSentWordLength: average word length per sentence\n posStats: return posStats for text. Analytics features: verbNounRatio: number of verb/ number of noun\nfuturePastRatio: number of future/ number of past\nadjectiveWordRatio: number of adjective/ number of word\nnamedEntityWordRatio: number of named entity/ number of word\nnounDistribution: list of noun distributions of each sentence\nverbDistribution: list of verb distributions of each sentence\nadjectiveDistribution: list of adjective distributions of each sentence","title":"TAP Queries"},{"location":"/developer/index.html","text":"","title":"Im a Developer"},{"location":"/developer/index.html#im-a-developer","text":"Getting setup with an IDE Clone the repo Working with Windows(7,10), Mac and Linux (Ubuntu Desktop) with IDEA Ultimate Contributing Working with the Repo Working with the code Creating Issues Pull Requests Project Structure How to edit documentation","title":"I’m a Developer"},{"location":"/developer/ide_setup.html","text":"","title":"Getting setup with an IDE"},{"location":"/developer/ide_setup.html#getting-setup-with-an-ide","text":"This section will help you get started with the source code on any of the following operating systems.","title":"Getting setup with an IDE"},{"location":"/developer/ide_setup.html#clone-the-repo","text":"First clone the latest version of the Dev branch from github","title":"Clone the repo"},{"location":"/developer/ide_setup.html#working-with-windows-7-10-mac-and-linux-ubuntu-desktop-with-idea-ultimate","text":"Notice It is recommended that you use an IDE to work on this project as it will provide many helper functions and build tools that make working with sbt and scala and lot easier to manage.\nThe recommended IDE is Intellij IDEA ULTIMATE because of its Scala support, and relative ease of use. If you have any suggestions for alternate ways of working with this project please let us know by opening an issue. Otherwise the following is a guide to getting setup with IntelliJ IDEA Ultimate.\nWhen you first open IntelliJ IDEA, We first want to ensure you have the correct plugins. Click configure at the bottom of the start screen and choose Plugins. Check that you have the ‘Scala’ and SBT plugins installed. If this is the first time you have run IntelliJ you most likely won’t. Click Browse Repositories at the bottom and type in Scala to search for it then click install plugin. Do the same for the plugin called SBT. Below is the plugins that you want to install. Once you have installed both plugins it will direct you to restart IntelliJ. Once restarted select ‘Import Project’ and navigate to the directory where you cloned the repo too and choose the build.sbt file.\nMake sure Download library sources is ticked and that your Project JDK is chosen. If not you will need to select your JDK, You will need the 1.8 JRE and JDK found here. Then click the New Button > JDK and navigate to your java JRE In most cases it should be installed to C:\\Program Files\\Java\\jdk1.8.x and click ok. Once you click ok IntelliJ may take a while syncing the project(20-40 minutes for first time) Keep an eye on the progress bar at the bottom and wait until it is complete. Once it has synced open the app folder and then open the view folder. Right click on HomePage and select ‘Run Play 2 App’ this will automatically generate your run configuration. It may also download a number of files that SBT needs which may take some time. Once it has compiled and built you may find it will crash with an Out Of Memory Error. Let’s fix that now. Go to the Run Menu at the top and choose ‘Edit Configuration’, There are a few things we want to change here. First we want to check that the URL to open is http://localhost:9000 Then we want to enter some custom JVM Options -Xms512M -Xmx6000M -Xss1M -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256M replacing whatever is already there. Lastly we want to enter some Environment Variables click the folder icon then the + symbol under ‘Name’ enter TAP_HOSTS and under ‘Value’ enter localhost:9000 Click Apply then ok. Great now you can right click HomePage again and select ‘Run Play 2 App’ and it should compile and load up the homepage. You are good to go! Try visiting the graphql interface and see what it can do!\nDocument Last Updated on 21/11/2018","title":"Working with Windows(7,10), Mac and Linux (Ubuntu Desktop) with IDEA Ultimate"},{"location":"/developer/contributing.html","text":"","title":"Contributing"},{"location":"/developer/contributing.html#contributing","text":"Would you like to contribute to this open source project. Some guidelines on how to do are listed below","title":"Contributing"},{"location":"/developer/contributing.html#working-with-the-repo","text":"Ensure you work with the latest Develop branch from here\nhttps://github.com/infosci-qut/tap/tree/develop","title":"Working with the Repo"},{"location":"/developer/contributing.html#working-with-the-code","text":"See Getting setup with an IDE for instructions on how to get setup with an IDE","title":"Working with the code"},{"location":"/developer/contributing.html#creating-issues","text":"Please open all issues here\nPlease ensure you have first searched to see if a similar issue is already listed, Then please leave a comment directly on that issue, or use a reaction\nPlease include the following with any issues\nOperating System you are running TAP on. Please include the specs of the machine that is hosting TAP Include any relevant information on how it is running (Docker, AWS etc..). Please include any relevant errors that are showing, Copy and paste into the issue. Briefly describe what you were doing when the error was encountered.","title":"Creating Issues"},{"location":"/developer/contributing.html#pull-requests","text":"Please ensure you have pulled the latest changes on the Dev branch here\nAll pull requests to be created on the develop branch here\nDocument Last Updated on 21/11/2018","title":"Pull Requests"},{"location":"/developer/project_structure.html","text":"","title":"Project Structure"},{"location":"/developer/project_structure.html#project-structure","text":"Although TAP is a Play project, the project structure is that of a Maven/sbt project and does not follow the Play default project structure.\nThe build.sbt file indicates that we are using an alternative project structure to Play.\ndisablePlugins(PlayLayoutPlugin)\n    PlayKeys.playMonitoredFiles ++= (sourceDirectories in (Compile, TwirlKeys.compileTemplates)).value\nThis project is laid out in an MVC structure (Model, View and Controller).\nThere are 2 main components to this project, * The front end (Client) * The back end (Server)\nThe following is a run down of the most relevant files in the project.\napp - Contains the controllers, models and views. controllers - Contains the controllers of the project handlers models graphql views GraphqlPage - The GraphQl Interface page which allows you to test out the graphql queries in a playground. HomePage - The home page which contains links to the docs, The source code and the Graphql Interfact. documentation - Contains all the documentation source code that can be automatically generated see Documentation Updates tap_client src tap_server src\nFor more details, see the “Default SBT Layout” section in the “Anatomy of a Play Application” chapter in the Play 2.6 Documentation:\nplay-project-anatomy\nDocument Last Updated on 21/11/2018","title":"Project Structure"},{"location":"/developer/doc_updates.html","text":"","title":"How to edit documentation"},{"location":"/developer/doc_updates.html#how-to-edit-documentation","text":"We use Paradox to automatically build the documentation.\nParadox documentation\nThe source files for the documentation is stored under tap/documentation.\nThere are 3 folders in the /documentation directory which include the 3 sections that you see on the left.\ndocumentation/developer\ndocumentation/overview\ndocumentation/user\nYou will notice that within each folder is an index.md file which will tell paradox the child pages of that directory.\nTo set the title of the page at the top of the file include a line like so #### This is the title\nThe rest of the documentation can be written with simple markdown Github Style\nIf you wish to include or change any documentation only edit the files in the documentation folder. The docs folder is where paradox will build the final documentation to and should not be edited locally.\nTo build your documentation run the following command inside the sbt shell\nupdateDocs\nIf you are making a pull request please complete these steps to ensure there are no conflicts.\nDelete all files inside the /docs directory. Run updateDocs inside the sbt shell inside the docs directory delete the following files client-opt.js client-opt.js.map client-opt-bundle.js client-opt-bundle.js.map client-opt-library.js client-opt-library.js.map client-opt-loader.js\nNow you are able to make a pull request. For more information on contributing see Contributing\nDocument Last Updated on 21/11/2018","title":"How to edit documentation"}]}